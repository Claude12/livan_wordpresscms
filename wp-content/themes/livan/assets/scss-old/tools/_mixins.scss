@use "../settings/colors" as c;

// Responsive Breakpoints
@mixin min-width($point) {
  $breakpoints: (
    xs: 320px,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    xxl: 1400px,
  );
  @media (min-width: map-get($breakpoints, $point)) {
    @content;
  }
}

@mixin max-width($point) {
  $breakpoints: (
    xs: 320px,
    sm: 576px,
    md: 768px,
    lg: 992px,
    xl: 1200px,
    xxl: 1400px,
  );
  @media (max-width: map-get($breakpoints, $point)) {
    @content;
  }
}

// Fonts
$font-sizes: (
  "12": 12px,
  "14": 14px,
  "16": 16px,
  "18": 18px,
  "20": 20px,
  "25": 25px,
  "28": 28px,
  "30": 30px,
);

$font-weights: (
  "400": 400,
  "500": 500,
  "700": 700,
);

// Mixin to create font size and weight classes
@mixin create-font-size-weight-classes {
  @each $size-label, $size in $font-sizes {
    @each $weight-label, $weight in $font-weights {
      .fs-#{$size-label}-#{$weight-label} {
        font-size: $size !important;
        font-weight: $weight !important;
      }
      // Also create classes without weight for default usage
      .fs-#{$size-label} {
        font-size: $size !important;
      }
    }
  }
}

//Colors
$colors: (
  "black": c.$c-black,
);

// Mixin to create color classes
@mixin create-color-classes {
  @each $color-name, $color-value in $colors {
    .text-#{"" + $color-name} {
      color: $color-value !important;
    }
    .bg-#{"" + $color-name} {
      background-color: $color-value !important;
    }
  }
}

@include create-color-classes;
@include create-font-size-weight-classes;

// Truncate
@mixin truncate($lines) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
  text-overflow: ellipsis;
}
